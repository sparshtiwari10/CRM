rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user document
    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserDoc().data.role == 'admin';
    }

    // Helper function to check if user is active
    function isActiveUser() {
      return isAuthenticated() && getUserDoc().data.is_active == true;
    }

    // Helper function to check if user can access area
    function canAccessArea(area) {
      let userData = getUserDoc().data;
      return isAdmin() ||
             userData.collector_name == area ||
             (userData.assigned_areas != null && area in userData.assigned_areas);
    }

    // Users collection - user profile management
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Admins can read/write all user profiles
      allow read, write: if isAdmin();

      // Allow creation of user documents during authentication
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Users can update their own basic profile info
      allow update: if isAuthenticated() &&
                   request.auth.uid == userId &&
                   !('role' in resource.data) ||
                   resource.data.role == request.data.role;
    }

    // Customers collection - customer data
    match /customers/{customerId} {
      // Admins can do everything
      allow read, write: if isAdmin() && isActiveUser();

      // Employees can read/write customers in their assigned areas
      allow read, write: if isAuthenticated() &&
                        isActiveUser() &&
                        canAccessArea(resource.data.collectorName);

      // Allow reading for customer area validation
      allow read: if isAuthenticated() && isActiveUser();
    }

    // Packages collection - service packages
    match /packages/{packageId} {
      // All authenticated active users can read packages
      allow read: if isAuthenticated() && isActiveUser();

      // Only admins can modify packages
      allow write: if isAdmin() && isActiveUser();
    }

    // VC Inventory collection - VC number management
    match /vcInventory/{vcId} {
      // Admins can do everything
      allow read, write: if isAdmin() && isActiveUser();

      // Employees can read VCs in their assigned areas
      allow read: if isAuthenticated() &&
                 isActiveUser() &&
                 canAccessArea(resource.data.area);

      // Employees can update VC status and customer assignments in their areas
      allow update: if isAuthenticated() &&
                   isActiveUser() &&
                   canAccessArea(resource.data.area) &&
                   // Only allow status and customer assignment changes, not creation/deletion
                   (!('vcNumber' in request.data) || request.data.vcNumber == resource.data.vcNumber);
    }

    // Bills collection - monthly bill generation
    match /bills/{billId} {
      // Admins can do everything (create, read, update bills)
      allow read, write: if isAdmin() && isActiveUser();

      // Employees can read bills for customers in their assigned areas
      allow read: if isAuthenticated() &&
                 isActiveUser() &&
                 canAccessArea(resource.data.customerArea);

      // Bills are primarily created by system/admin, employees have read-only access
    }

    // Invoices collection - payment records
    match /invoices/{invoiceId} {
      // Admins can do everything
      allow read, write: if isAdmin() && isActiveUser();

      // Employees can read/create invoices for customers in their assigned areas
      allow read, create: if isAuthenticated() &&
                         isActiveUser() &&
                         canAccessArea(resource.data.customerArea);

      // Employees can update invoices they created
      allow update: if isAuthenticated() &&
                   isActiveUser() &&
                   canAccessArea(resource.data.customerArea) &&
                   request.auth.uid == resource.data.collectedBy;
    }

    // Billing records collection (legacy - keeping for backward compatibility)
    match /billing/{billingId} {
      // Admins can do everything
      allow read, write: if isAdmin() && isActiveUser();

      // Employees can access billing for their areas
      allow read, write: if isAuthenticated() &&
                        isActiveUser() &&
                        canAccessArea(resource.data.area);
    }

    // Service requests collection
    match /requests/{requestId} {
      // Admins can do everything
      allow read, write: if isAdmin() && isActiveUser();

      // Employees can read/create requests for their areas
      allow read, create: if isAuthenticated() &&
                         isActiveUser() &&
                         canAccessArea(resource.data.area);

      // Employees can update requests they created
      allow update: if isAuthenticated() &&
                   isActiveUser() &&
                   request.auth.uid == resource.data.createdBy;
    }

    // Action requests collection - approval workflow
    match /actionRequests/{requestId} {
      // Admins can do everything
      allow read, write: if isAdmin() && isActiveUser();

      // Employees can create requests
      allow create: if isAuthenticated() && isActiveUser();

      // Employees can read their own requests
      allow read: if isAuthenticated() &&
                 isActiveUser() &&
                 request.auth.uid == resource.data.requestedBy;
    }

    // System logs and analytics (admin only)
    match /logs/{logId} {
      allow read, write: if isAdmin() && isActiveUser();
    }

    match /analytics/{analyticsId} {
      allow read, write: if isAdmin() && isActiveUser();
    }

    // Configuration and settings (admin only)
    match /config/{configId} {
      allow read: if isAuthenticated() && isActiveUser();
      allow write: if isAdmin() && isActiveUser();
    }

    // Application settings collection
    match /settings/{settingsId} {
      // All authenticated users can read settings (for project name on login)
      allow read: if isAuthenticated();

      // Only admins can modify settings
      allow write: if isAdmin() && isActiveUser();

      // Allow unauthenticated read for project name on login page
      allow read: if settingsId == 'app_settings';
    }

    // Areas collection - area management
    match /areas/{areaId} {
      // All authenticated users can read areas (for dropdowns)
      allow read: if isAuthenticated() && isActiveUser();

      // Only admins can modify areas
      allow write: if isAdmin() && isActiveUser();
    }

    // Status logs collection - customer status change history
    match /statusLogs/{logId} {
      // Admins can read all status logs
      allow read: if isAdmin() && isActiveUser();

      // Employees can read logs for customers in their areas
      allow read: if isAuthenticated() &&
                 isActiveUser() &&
                 canAccessArea(resource.data.area);

      // Only admins can create status logs
      allow write: if isAdmin() && isActiveUser();
    }

    // Extended billing records for customer history
    match /customerBillingHistory/{recordId} {
      // Admins can read all billing history
      allow read: if isAdmin() && isActiveUser();

      // Employees can read billing history for customers in their areas
      allow read: if isAuthenticated() &&
                 isActiveUser() &&
                 canAccessArea(resource.data.area);

      // Both admins and employees can create billing records
      allow write: if isAuthenticated() && isActiveUser();
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
PRODUCTION FIRESTORE SECURITY RULES - AGV Cable TV Management System
Updated with Cable TV CRM Collections

Key Security Features:
✅ Firebase Authentication Required - All operations require valid auth
✅ Role-Based Access Control - Admin vs Employee permissions
✅ Area-Based Access - Employees limited to their assigned areas
✅ Active User Check - Inactive users cannot access data
✅ User Profile Protection - Users can only modify their own profiles
✅ Multi-Area Support - Employees can be assigned multiple areas
✅ Secure Customer Access - Area-based customer data protection
✅ Admin-Only Operations - Package management, system config
✅ Request Workflow Security - Proper approval chain protection
✅ VC Inventory Management - Area-based VC access with admin controls
✅ Bills Generation Security - Admin-only bill creation, area-based reading
✅ Payment Collection - Employee area restrictions with secure payment recording
✅ Default Deny - Explicit denial of unlisted collections

Collection Access Summary:
- users: Self-read + admin full access
- customers: Area-based access for employees, full for admin
- packages: Read for all, write for admin only
- vcInventory: Admin full access, employee area-based read/update (no create/delete)
- bills: Admin full access, employee area-based read-only
- invoices: Admin full access, employee area-based create/read with own-record updates
- billing: Area-based access matching customer assignments (legacy support)
- requests: Area-based creation, admin approval
- actionRequests: Employee create, admin manage
- logs/analytics/config: Admin only
- Default: Deny all access

New Cable TV CRM Security Features:
📺 VC Inventory: Employees can view and update VC status/assignments in their areas, admins have full control
💰 Bills: Admin-only generation and management, employees can read bills for their area customers
🧾 Invoices: Employees can collect payments for their area customers, admins have full oversight
🔐 Area Restrictions: All new collections respect employee area assignments
📊 Audit Trails: Payment collection and VC changes tracked with user attribution

Deployment Instructions:
1. Deploy these rules using: firebase deploy --only firestore:rules
2. Monitor Firebase Console for rule evaluation logs
3. Test with different user roles and areas for new collections
4. Verify VC inventory area restrictions work correctly
5. Test bill reading permissions for employees
6. Verify invoice creation and payment collection security

Security Notes:
- All user operations require active account status
- Area assignments support both single (collector_name) and multiple (assigned_areas)
- Customer data is protected by area assignments
- VC Inventory respects area boundaries for employee access
- Bills are primarily admin-managed with employee read access
- Payment collection is area-restricted for employees
- Admin role has full system access across all collections
- Emergency access should be handled through Firebase Console
*/
