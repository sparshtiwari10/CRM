rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && getUserData().role == 'admin';
    }
    
    // Helper function to check if user is employee with matching collector
    function isEmployeeWithAccess(collectorName) {
      return request.auth != null && 
             getUserData().role == 'employee' && 
             getUserData().collector_name == collectorName;
    }
    
    // Users collection - admins can manage all users, users can read their own data
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
      allow write: if isAdmin();
    }
    
    // Customers collection - role-based access with collector filtering
    match /customers/{customerId} {
      allow read, write: if request.auth != null && (
        isAdmin() || 
        isEmployeeWithAccess(resource.data.collector_name)
      );
      allow create: if request.auth != null && (
        isAdmin() || 
        (getUserData().role == 'employee' && 
         request.resource.data.collector_name == getUserData().collector_name)
      );
    }
    
    // Billing collection - same access pattern as customers
    match /billing/{billingId} {
      allow read, write: if request.auth != null && (
        isAdmin() || 
        isEmployeeWithAccess(resource.data.collector_name)
      );
      allow create: if request.auth != null && (
        isAdmin() || 
        (getUserData().role == 'employee' && 
         request.resource.data.collector_name == getUserData().collector_name)
      );
    }
    
    // Requests collection - employees can create requests, admins can manage all
    match /requests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && getUserData().role == 'employee';
      allow update, delete: if isAdmin();
    }
    
    // Packages collection - read-only for all authenticated users, write for admins
    match /packages/{packageId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Reports collection - admin only
    match /reports/{reportId} {
      allow read, write: if isAdmin();
    }
  }
}
