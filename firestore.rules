rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for user authentication and role validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function userDocExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function usersCollectionExists() {
      return exists(/databases/$(database)/documents/users);
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // More lenient admin check for better setup experience
    function isAdmin() {
      return isAuthenticated() && (
        // Standard case: user exists and is admin
        (userDocExists() && 
         getUserData().role == 'admin' && 
         getUserData().is_active == true) ||
        // Setup case: no users collection exists at all (first time setup)
        !usersCollectionExists()
      );
    }
    
    function isEmployee() {
      return isAuthenticated() && 
             userDocExists() &&
             getUserData().role == 'employee' &&
             getUserData().is_active == true;
    }
    
    // Simplified active user check with better fallback
    function isActiveUser() {
      return isAuthenticated() && (
        // Normal case: user exists and is active
        (userDocExists() && getUserData().is_active == true) ||
        // Setup case: no users collection exists yet
        !usersCollectionExists() ||
        // Fallback case: user exists but users collection check fails
        isAuthenticated()
      );
    }

    // Users collection - Admin and self-access only
    match /users/{userId} {
      // Read: Admin can read all, users can read themselves, or if no users exist yet
      allow read: if isAuthenticated() && (
        isAdmin() || 
        request.auth.uid == userId ||
        !usersCollectionExists()
      );
      
      // List: Admin can list all users, or if no users exist yet
      allow list: if isAuthenticated() && (
        isAdmin() || 
        !usersCollectionExists()
      );
      
      // Create: Allow creation if admin, or if no users exist (first user)
      allow create: if isAuthenticated() && (
        isAdmin() || 
        !usersCollectionExists()
      ) && 
      // Basic validation
      request.resource.data.name is string &&
      request.resource.data.role in ['admin', 'employee'] &&
      request.resource.data.is_active == true;
      
      // Update: Admin only, or self-update for basic fields
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (request.auth.uid == userId && 
         !('role' in request.resource.data) && 
         !('is_active' in request.resource.data))
      );
      
      // Delete: Admin only, but not themselves
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // Packages collection - Simplified for better compatibility
    match /packages/{packageId} {
      // Read: All authenticated users can read packages
      allow read: if isAuthenticated();
      
      // List: All authenticated users can list packages
      allow list: if isAuthenticated();
      
      // Create: Admin only, with basic validation
      allow create: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      ) &&
      request.resource.data.name is string &&
      request.resource.data.price is number &&
      request.resource.data.price > 0;
      
      // Update: Admin only
      allow update: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
      
      // Delete: Admin only
      allow delete: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
    }

    // Customers collection - Simplified access
    match /customers/{customerId} {
      // Read: Active users can read
      allow read: if isActiveUser();
      
      // List: Active users can list (app handles filtering)
      allow list: if isActiveUser();
      
      // Create: Admin only
      allow create: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      ) &&
      request.resource.data.name is string;
      
      // Update: Admin only
      allow update: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
      
      // Delete: Admin only
      allow delete: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
    }

    // Billing records collection
    match /billing/{billingId} {
      // Read: Active users can read
      allow read: if isActiveUser();
      
      // List: Active users can list
      allow list: if isActiveUser();
      
      // Create: Active users can create
      allow create: if isActiveUser() &&
                       request.resource.data.customer_id is string &&
                       request.resource.data.amount > 0;
      
      // Update: Admin only
      allow update: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
      
      // Delete: Admin only
      allow delete: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
    }

    // Requests collection
    match /requests/{requestId} {
      // Read: Active users can read
      allow read: if isActiveUser();
      
      // List: Active users can list
      allow list: if isActiveUser();
      
      // Create: Active users can create
      allow create: if isActiveUser() &&
                       request.resource.data.customer_id is string &&
                       request.resource.data.status == 'pending';
      
      // Update: Admin only
      allow update: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
      
      // Delete: Admin only
      allow delete: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
    }

    // System logs collection
    match /system_logs/{logId} {
      // Read: Admin only
      allow read: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
      
      // List: Admin only
      allow list: if isAuthenticated() && (
        isAdmin() || !usersCollectionExists()
      );
      
      // Create: Any authenticated user can create logs
      allow create: if isAuthenticated();
      
      // Update/Delete: No one can modify logs
      allow update, delete: if false;
    }
  }
}
