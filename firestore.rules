rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for user authentication and role validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function userDocExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Enhanced admin check with better error handling
    function isAdmin() {
      // First just check if user is authenticated
      return isAuthenticated() && (
        // Standard case: user exists and is admin
        (userDocExists() && 
         getUserData().role == 'admin' && 
         getUserData().is_active == true) ||
        // Bootstrap case: if no users collection at all, first user is admin
        !exists(/databases/$(database)/documents/users))
    }
    
    function isEmployee() {
      return isAuthenticated() && 
             userDocExists() &&
             getUserData().role == 'employee' &&
             getUserData().is_active == true;
    }
    
    // Simplified active user check
    function isActiveUser() {
      return isAuthenticated() && (
        (userDocExists() && getUserData().is_active == true) ||
        !exists(/databases/$(database)/documents/users)
      );
    }
    
    function canAccessCustomer(customerData) {
      return isAdmin() || 
             (isEmployee() && 
              getUserData().collector_name == customerData.collector_name);
    }

    // Users collection - Admin and self-access only
    match /users/{userId} {
      // Read: Admin can read all, users can read themselves
      allow read: if isAdmin() || 
                     (isAuthenticated() && request.auth.uid == userId);
      
      // List: Admin can list all users
      allow list: if isAdmin();
      
      // Create: Admins can create users, or allow initial user creation if no users exist
      allow create: if (isAdmin() || !exists(/databases/$(database)/documents/users)) &&
                       // Validate required fields
                       request.resource.data.name is string &&
                       request.resource.data.role in ['admin', 'employee'] &&
                       request.resource.data.is_active == true;
      
      // Update: Only admins can update users
      allow update: if isAdmin() &&
                       // Validate role if present
                       (!('role' in request.resource.data) || 
                        request.resource.data.role in ['admin', 'employee']);
      
      // Delete: Only admins can delete users, but not themselves
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // Customers collection - Role-based access with collector validation
    match /customers/{customerId} {
      // Read: Admin can read all, employees can read their assigned customers
      allow read: if isActiveUser();
      
      // List: Allow listing for active users (filtering handled by app)
      allow list: if isActiveUser();
      
      // Create: Only admins can create customers
      allow create: if isAdmin() &&
                       // Validate required fields
                       request.resource.data.name is string &&
                       request.resource.data.phone is string;
      
      // Update: Only admins can update customers
      allow update: if isAdmin();
      
      // Delete: Only admins can delete customers
      allow delete: if isAdmin();
    }

    // Billing records collection - Role-based access with employee validation
    match /billing/{billingId} {
      // Read: Admin can read all, employees can read their own records
      allow read: if isActiveUser();
      
      // List: Allow listing for active users (filtering handled by app)
      allow list: if isActiveUser();
      
      // Create: Active users can create billing records
      allow create: if isActiveUser() &&
                       request.resource.data.customer_id is string &&
                       request.resource.data.customer_name is string &&
                       request.resource.data.amount > 0;
      
      // Update: Only admins can update billing records
      allow update: if isAdmin();
      
      // Delete: Only admins can delete billing records
      allow delete: if isAdmin();
    }

    // Requests collection - Role-based access with validation
    match /requests/{requestId} {
      // Read: Admin can read all, employees can read their own requests
      allow read: if isActiveUser();
      
      // List: Allow listing for active users (filtering handled by app)
      allow list: if isActiveUser();
      
      // Create: Active users can create requests
      allow create: if isActiveUser() &&
                       request.resource.data.customer_id is string &&
                       request.resource.data.customer_name is string &&
                       request.resource.data.action_type in ['activation', 'deactivation', 'plan_change'] &&
                       request.resource.data.reason is string &&
                       request.resource.data.status == 'pending';
      
      // Update: Only admins can update requests (approve/reject)
      allow update: if isAdmin() &&
                       request.resource.data.status in ['pending', 'approved', 'rejected'];
      
      // Delete: Only admins can delete requests
      allow delete: if isAdmin();
    }

    // Packages collection - Simplified validation for better compatibility
    match /packages/{packageId} {
      // Read: All authenticated users can read packages
      allow read: if isAuthenticated();
      
      // List: All authenticated users can list packages
      allow list: if isAuthenticated();
      
      // Create: Only admins can create packages
      allow create: if isAdmin() &&
                       request.resource.data.name is string &&
                       request.resource.data.price is number &&
                       request.resource.data.price > 0 &&
                       request.resource.data.description is string &&
                       request.resource.data.channels is number &&
                       request.resource.data.channels > 0 &&
                       request.resource.data.is_active is bool;
      
      // Update: Only admins can update packages
      allow update: if isAdmin();
      
      // Delete: Only admins can delete packages
      allow delete: if isAdmin();
    }

    // System logs collection - Admin access only
    match /system_logs/{logId} {
      // Read: Only admins can read system logs
      allow read: if isAdmin();
      
      // List: Only admins can list system logs
      allow list: if isAdmin();
      
      // Create: Active users can create logs (for auditing)
      allow create: if isActiveUser();
      
      // Update/Delete: No one can modify or delete logs
      allow update, delete: if false;
    }

    // Allow creation of empty collections if they don't exist yet
    match /{collection}/{document} {
      allow create: if isAuthenticated() && 
                      collection in ['packages', 'customers', 'billing', 'requests'] &&
                      !exists(/databases/$(database)/documents/$(collection));
    }
    
    // Special bootstrapping rule - Allow creation of first documents in empty collections
    match /{collection}/{document} {
      allow create: if isAuthenticated() && 
                      collection in ['packages', 'customers', 'billing', 'requests'] &&
                      exists(/databases/$(database)/documents/$(collection)) && 
                      getAfter(/databases/$(database)/documents/$(collection)).size() == 1;
    }
  }
}
